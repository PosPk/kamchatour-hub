import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  Alert,
  ActivityIndicator,
  Dimensions,
  FlatList,
} from 'react-native';
import { LinearGradient } from 'react-native-linear-gradient';
import { MaterialIcons, MaterialCommunityIcons } from '@expo/vector-icons';
import { useQuantum } from '../contexts/QuantumContext';

const { width } = Dimensions.get('window');

interface AlgorithmResult {
  id: string;
  name: string;
  quantumScore: number;
  classicalScore: number;
  improvement: number;
  executionTime: number;
  energyEfficiency: number;
  status: 'pending' | 'running' | 'completed' | 'error';
}

export default function QuantumBlockchainScreen() {
  const {
    quantumState,
    isQuantumAvailable,
    blockchainTransactions,
    smartContracts,
    isBlockchainConnected,
    runGroverSearch,
    runQuantumAnnealing,
    runVQE,
    runQuantumMachineLearning,
    createSmartContract,
    executeTransaction,
    getContractBalance,
    createQuantumProof,
    verifyQuantumSignature,
    quantumConsensus,
    getSystemStatus
  } = useQuantum();

  const [results, setResults] = useState<AlgorithmResult[]>([]);
  const [isRunning, setIsRunning] = useState(false);
  const [systemStatus, setSystemStatus] = useState<any>(null);

  useEffect(() => {
    loadSystemStatus();
  }, []);

  const loadSystemStatus = async () => {
    try {
      const status = await getSystemStatus();
      setSystemStatus(status);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
    }
  };

  const runAlgorithm = async (algorithm: string, data: any) => {
    if (!isQuantumAvailable) {
      Alert.alert('–û—à–∏–±–∫–∞', '–ö–≤–∞–Ω—Ç–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      return;
    }

    setIsRunning(true);
    const resultId = `${algorithm}_${Date.now()}`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const newResult: AlgorithmResult = {
      id: resultId,
      name: algorithm,
      quantumScore: 0,
      classicalScore: 0,
      improvement: 0,
      executionTime: 0,
      energyEfficiency: 0,
      status: 'running'
    };

    setResults(prev => [...prev, newResult]);

    try {
      let result;
      switch (algorithm) {
        case 'Grover Search':
          result = await runGroverSearch(data, 'target');
          break;
        case 'Quantum Annealing':
          result = await runQuantumAnnealing(data);
          break;
        case 'VQE':
          result = await runVQE(data);
          break;
        case 'Quantum ML':
          result = await runQuantumMachineLearning(data);
          break;
        default:
          throw new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º');
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      setResults(prev => prev.map(r => 
        r.id === resultId 
          ? {
              ...r,
              quantumScore: result.quantumScore,
              classicalScore: result.classicalScore,
              improvement: result.improvement,
              executionTime: result.executionTime,
              energyEfficiency: result.energyEfficiency,
              status: 'completed'
            }
          : r
      ));

    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ${algorithm}:`, error);
      setResults(prev => prev.map(r => 
        r.id === resultId ? { ...r, status: 'error' } : r
      ));
      Alert.alert('–û—à–∏–±–∫–∞', `–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å ${algorithm}`);
    } finally {
      setIsRunning(false);
    }
  };

  const handleCreateContract = async () => {
    try {
      const contract = await createSmartContract('test', { name: 'Test Contract' });
      Alert.alert('–£—Å–ø–µ—Ö', `–ö–æ–Ω—Ç—Ä–∞–∫—Ç —Å–æ–∑–¥–∞–Ω: ${contract.address}`);
    } catch (error) {
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç');
    }
  };

  const handleExecuteTransaction = async () => {
    try {
      const transaction = await executeTransaction(
        '0x1234...5678',
        '0x8765...4321',
        0.1
      );
      Alert.alert('–£—Å–ø–µ—Ö', `–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: ${transaction.hash}`);
    } catch (error) {
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é');
    }
  };

  const handleCreateQuantumProof = async () => {
    try {
      const proof = await createQuantumProof({ data: 'test data' });
      Alert.alert('–£—Å–ø–µ—Ö', `–ö–≤–∞–Ω—Ç–æ–≤–æ–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–æ: ${proof}`);
    } catch (error) {
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–≤–∞–Ω—Ç–æ–≤–æ–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ');
    }
  };

  const handleQuantumConsensus = async () => {
    try {
      const consensus = await quantumConsensus(
        ['0x1234...5678', '0x8765...4321', '0xabcd...efgh'],
        { proposal: 'test proposal' }
      );
      Alert.alert('–†–µ–∑—É–ª—å—Ç–∞—Ç', `–ö–æ–Ω—Å–µ–Ω—Å—É—Å: ${consensus ? '–î–æ—Å—Ç–∏–≥–Ω—É—Ç' : '–ù–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç'}`);
    } catch (error) {
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∏—á—å –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞');
    }
  };

  const renderAlgorithmResult = ({ item }: { item: AlgorithmResult }) => (
    <View style={styles.resultCard}>
      <View style={styles.resultHeader}>
        <Text style={styles.resultName}>{item.name}</Text>
        <View style={[
          styles.statusIndicator,
          { backgroundColor: item.status === 'completed' ? '#4CAF50' : 
                          item.status === 'running' ? '#FF9800' : 
                          item.status === 'error' ? '#F44336' : '#9E9E9E' }
        ]} />
      </View>
      
      {item.status === 'completed' && (
        <View style={styles.resultDetails}>
          <View style={styles.resultRow}>
            <Text style={styles.resultLabel}>–ö–≤–∞–Ω—Ç–æ–≤—ã–π —Å—á–µ—Ç:</Text>
            <Text style={styles.resultValue}>{item.quantumScore.toFixed(1)}</Text>
          </View>
          <View style={styles.resultRow}>
            <Text style={styles.resultLabel}>–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Å—á–µ—Ç:</Text>
            <Text style={styles.resultValue}>{item.classicalScore.toFixed(1)}</Text>
          </View>
          <View style={styles.resultRow}>
            <Text style={styles.resultLabel}>–£–ª—É—á—à–µ–Ω–∏–µ:</Text>
            <Text style={[styles.resultValue, { color: '#4CAF50' }]}>
              +{item.improvement.toFixed(1)}%
            </Text>
          </View>
          <View style={styles.resultRow}>
            <Text style={styles.resultLabel}>–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</Text>
            <Text style={styles.resultValue}>{item.executionTime}ms</Text>
          </View>
          <View style={styles.resultRow}>
            <Text style={styles.resultLabel}>–≠–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</Text>
            <Text style={styles.resultValue}>{(item.energyEfficiency * 100).toFixed(0)}%</Text>
          </View>
        </View>
      )}
      
      {item.status === 'running' && (
        <View style={styles.runningIndicator}>
          <ActivityIndicator size="small" color="#FF9800" />
          <Text style={styles.runningText}>–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...</Text>
        </View>
      )}
      
      {item.status === 'error' && (
        <Text style={styles.errorText}>–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</Text>
      )}
    </View>
  );

  const renderSmartContract = ({ item }: { item: any }) => (
    <View style={styles.contractCard}>
      <View style={styles.contractHeader}>
        <Text style={styles.contractName}>{item.name}</Text>
        <Text style={styles.contractType}>{item.type}</Text>
      </View>
      <Text style={styles.contractAddress}>–ê–¥—Ä–µ—Å: {item.address}</Text>
      <View style={styles.contractStats}>
        <Text style={styles.contractStat}>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {item.totalTransactions}</Text>
        <Text style={styles.contractStat}>–ó–Ω–∞—á–µ–Ω–∏–µ: {item.totalValue} ETH</Text>
      </View>
    </View>
  );

  const renderTransaction = ({ item }: { item: any }) => (
    <View style={styles.transactionCard}>
      <View style={styles.transactionHeader}>
        <Text style={styles.transactionHash}>{item.hash.substring(0, 20)}...</Text>
        <Text style={styles.transactionAmount}>{item.amount} ETH</Text>
      </View>
      <Text style={styles.transactionFrom}>–û—Ç: {item.from}</Text>
      <Text style={styles.transactionTo}>–ö: {item.to}</Text>
      <Text style={styles.transactionTime}>
        {new Date(item.timestamp).toLocaleString()}
      </Text>
    </View>
  );

  return (
    <ScrollView style={styles.container}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <LinearGradient
        colors={['#667eea', '#764ba2']}
        style={styles.header}
      >
        <MaterialCommunityIcons name="quantum-entanglement" size={40} color="#fff" />
        <Text style={styles.headerTitle}>–ö–≤–∞–Ω—Ç–æ–≤–æ-–±–ª–æ–∫—á–µ–π–Ω —Å–∏—Å—Ç–µ–º–∞</Text>
        <Text style={styles.headerSubtitle}>
          –ü–µ—Ä–µ–¥–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–ª—è —Ç—É—Ä–∏–∑–º–∞ –±—É–¥—É—â–µ–≥–æ
        </Text>
      </LinearGradient>

      {/* –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã */}
      <View style={styles.statusSection}>
        <Text style={styles.sectionTitle}>üîß –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</Text>
        <View style={styles.statusGrid}>
          <View style={styles.statusCard}>
            <MaterialCommunityIcons 
              name={isQuantumAvailable ? "check-circle" : "close-circle"} 
              size={24} 
              color={isQuantumAvailable ? "#4CAF50" : "#F44336"} 
            />
            <Text style={styles.statusLabel}>–ö–≤–∞–Ω—Ç–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞</Text>
            <Text style={styles.statusValue}>
              {isQuantumAvailable ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}
            </Text>
          </View>
          
          <View style={styles.statusCard}>
            <MaterialCommunityIcons 
              name={isBlockchainConnected ? "check-circle" : "close-circle"} 
              size={24} 
              color={isBlockchainConnected ? "#4CAF50" : "#F44336"} 
            />
            <Text style={styles.statusLabel}>–ë–ª–æ–∫—á–µ–π–Ω</Text>
            <Text style={styles.statusValue}>
              {isBlockchainConnected ? '–ü–æ–¥–∫–ª—é—á–µ–Ω' : '–û—Ç–∫–ª—é—á–µ–Ω'}
            </Text>
          </View>
          
          <View style={styles.statusCard}>
            <MaterialCommunityIcons name="memory" size={24} color="#2196F3" />
            <Text style={styles.statusLabel}>–ö—É–±–∏—Ç—ã</Text>
            <Text style={styles.statusValue}>{quantumState.qubits}</Text>
          </View>
          
          <View style={styles.statusCard}>
            <MaterialCommunityIcons name="flash" size={24} color="#FF9800" />
            <Text style={styles.statusLabel}>–ö–æ–≥–µ—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—å</Text>
            <Text style={styles.statusValue}>{(quantumState.coherence * 100).toFixed(0)}%</Text>
          </View>
        </View>
      </View>

      {/* –ö–≤–∞–Ω—Ç–æ–≤—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã */}
      <View style={styles.algorithmsSection}>
        <Text style={styles.sectionTitle}>üöÄ –ö–≤–∞–Ω—Ç–æ–≤—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã</Text>
        <Text style={styles.sectionSubtitle}>
          –í—ã–±–µ—Ä–∏—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ –∫–≤–∞–Ω—Ç–æ–≤–æ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ
        </Text>
        
        <View style={styles.algorithmsGrid}>
          <TouchableOpacity
            style={styles.algorithmButton}
            onPress={() => runAlgorithm('Grover Search', [1, 2, 3, 4, 5])}
            disabled={isRunning || !isQuantumAvailable}
          >
            <LinearGradient
              colors={['#667eea', '#764ba2']}
              style={styles.algorithmGradient}
            >
              <MaterialCommunityIcons name="magnify" size={24} color="#fff" />
              <Text style={styles.algorithmButtonText}>Grover Search</Text>
            </LinearGradient>
          </TouchableOpacity>

          <TouchableOpacity
            style={styles.algorithmButton}
            onPress={() => runAlgorithm('Quantum Annealing', { variables: 10 })}
            disabled={isRunning || !isQuantumAvailable}
          >
            <LinearGradient
              colors={['#f093fb', '#f5576c']}
              style={styles.algorithmGradient}
            >
              <MaterialCommunityIcons name="fire" size={24} color="#fff" />
              <Text style={styles.algorithmButtonText}>Quantum Annealing</Text>
            </LinearGradient>
          </TouchableOpacity>

          <TouchableOpacity
            style={styles.algorithmButton}
            onPress={() => runAlgorithm('VQE', { molecules: ['H2', 'LiH'] })}
            disabled={isRunning || !isQuantumAvailable}
          >
            <LinearGradient
              colors={['#4facfe', '#00f2fe']}
              style={styles.algorithmGradient}
            >
              <MaterialCommunityIcons name="atom" size={24} color="#fff" />
              <Text style={styles.algorithmButtonText}>VQE</Text>
            </LinearGradient>
          </TouchableOpacity>

          <TouchableOpacity
            style={styles.algorithmButton}
            onPress={() => runAlgorithm('Quantum ML', { dataset: 'kamchatka_tours' })}
            disabled={isRunning || !isQuantumAvailable}
          >
            <LinearGradient
              colors={['#43e97b', '#38f9d7']}
              style={styles.algorithmGradient}
            >
              <MaterialCommunityIcons name="brain" size={24} color="#fff" />
              <Text style={styles.algorithmButtonText}>Quantum ML</Text>
            </LinearGradient>
          </TouchableOpacity>
        </View>
      </View>

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ */}
      {results.length > 0 && (
        <View style={styles.resultsSection}>
          <Text style={styles.sectionTitle}>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</Text>
          <FlatList
            data={results}
            renderItem={renderAlgorithmResult}
            keyExtractor={item => item.id}
            scrollEnabled={false}
          />
        </View>
      )}

      {/* –ë–ª–æ–∫—á–µ–π–Ω –æ–ø–µ—Ä–∞—Ü–∏–∏ */}
      <View style={styles.blockchainSection}>
        <Text style={styles.sectionTitle}>üîó –ë–ª–æ–∫—á–µ–π–Ω –æ–ø–µ—Ä–∞—Ü–∏–∏</Text>
        
        <View style={styles.blockchainButtons}>
          <TouchableOpacity
            style={styles.blockchainButton}
            onPress={handleCreateContract}
            disabled={!isBlockchainConnected}
          >
            <LinearGradient
              colors={['#667eea', '#764ba2']}
              style={styles.blockchainButtonGradient}
            >
              <MaterialIcons name="add" size={20} color="#fff" />
              <Text style={styles.blockchainButtonText}>–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç</Text>
            </LinearGradient>
          </TouchableOpacity>

          <TouchableOpacity
            style={styles.blockchainButton}
            onPress={handleExecuteTransaction}
            disabled={!isBlockchainConnected}
          >
            <LinearGradient
              colors={['#f093fb', '#f5576c']}
              style={styles.blockchainButtonGradient}
            >
              <MaterialIcons name="send" size={20} color="#fff" />
              <Text style={styles.blockchainButtonText}>–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é</Text>
            </LinearGradient>
          </TouchableOpacity>

          <TouchableOpacity
            style={styles.blockchainButton}
            onPress={handleCreateQuantumProof}
            disabled={!isQuantumAvailable || !isBlockchainConnected}
          >
            <LinearGradient
              colors={['#4facfe', '#00f2fe']}
              style={styles.blockchainButtonGradient}
            >
              <MaterialCommunityIcons name="shield-check" size={20} color="#fff" />
              <Text style={styles.blockchainButtonText}>–ö–≤–∞–Ω—Ç–æ–≤–æ–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ</Text>
            </LinearGradient>
          </TouchableOpacity>

          <TouchableOpacity
            style={styles.blockchainButton}
            onPress={handleQuantumConsensus}
            disabled={!isQuantumAvailable || !isBlockchainConnected}
          >
            <LinearGradient
              colors={['#43e97b', '#38f9d7']}
              style={styles.blockchainButtonGradient}
            >
              <MaterialCommunityIcons name="handshake" size={20} color="#fff" />
              <Text style={styles.blockchainButtonText}>–ö–≤–∞–Ω—Ç–æ–≤—ã–π –∫–æ–Ω—Å–µ–Ω—Å—É—Å</Text>
            </LinearGradient>
          </TouchableOpacity>
        </View>
      </View>

      {/* –°–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã */}
      {smartContracts.length > 0 && (
        <View style={styles.contractsSection}>
          <Text style={styles.sectionTitle}>üìã –°–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã</Text>
          <FlatList
            data={smartContracts}
            renderItem={renderSmartContract}
            keyExtractor={item => item.address}
            scrollEnabled={false}
          />
        </View>
      )}

      {/* –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ */}
      {blockchainTransactions.length > 0 && (
        <View style={styles.transactionsSection}>
          <Text style={styles.sectionTitle}>üí∏ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</Text>
          <FlatList
            data={blockchainTransactions.slice(-5)} // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            renderItem={renderTransaction}
            keyExtractor={item => item.hash}
            scrollEnabled={false}
          />
        </View>
      )}

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö */}
      <View style={styles.infoSection}>
        <Text style={styles.sectionTitle}>üî¨ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –±—É–¥—É—â–µ–≥–æ</Text>
        <Text style={styles.infoText}>
          –ù–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∫–≤–∞–Ω—Ç–æ–≤—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏ –±–ª–æ–∫—á–µ–π–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:
        </Text>
        <View style={styles.techList}>
          <Text style={styles.techItem}>‚Ä¢ <Text style={styles.techBold}>–ö–≤–∞–Ω—Ç–æ–≤–æ-–∑–∞—â–∏—â–µ–Ω–Ω—ã–µ</Text> —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</Text>
          <Text style={styles.techItem}>‚Ä¢ <Text style={styles.techBold}>AI-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é</Text> –º–∞—Ä—à—Ä—É—Ç–æ–≤</Text>
          <Text style={styles.techItem}>‚Ä¢ <Text style={styles.techBold}>–î–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é</Text> —Ä–µ–ø—É—Ç–∞—Ü–∏—é</Text>
          <Text style={styles.techItem}>‚Ä¢ <Text style={styles.techBold}>–ö–≤–∞–Ω—Ç–æ–≤–æ–µ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ</Text></Text>
          <Text style={styles.techItem}>‚Ä¢ <Text style={styles.techBold}>–ë–ª–æ–∫—á–µ–π–Ω-—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ</Text></Text>
        </View>
      </View>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  header: {
    padding: 30,
    alignItems: 'center',
  },
  headerTitle: {
    color: '#fff',
    fontSize: 28,
    fontWeight: 'bold',
    marginTop: 16,
    marginBottom: 8,
  },
  headerSubtitle: {
    color: '#fff',
    fontSize: 16,
    textAlign: 'center',
    opacity: 0.9,
  },
  statusSection: {
    padding: 20,
    backgroundColor: '#fff',
    margin: 20,
    borderRadius: 16,
    elevation: 4,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  sectionTitle: {
    fontSize: 22,
    fontWeight: 'bold',
    marginBottom: 16,
    color: '#333',
  },
  statusGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
  },
  statusCard: {
    width: (width - 80) / 2,
    alignItems: 'center',
    padding: 16,
    marginBottom: 16,
  },
  statusLabel: {
    fontSize: 14,
    color: '#666',
    marginTop: 8,
    marginBottom: 4,
  },
  statusValue: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
  },
  algorithmsSection: {
    padding: 20,
    backgroundColor: '#fff',
    margin: 20,
    borderRadius: 16,
    elevation: 4,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  sectionSubtitle: {
    fontSize: 16,
    color: '#666',
    marginBottom: 20,
    lineHeight: 24,
  },
  algorithmsGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
  },
  algorithmButton: {
    width: (width - 80) / 2,
    marginBottom: 16,
    borderRadius: 12,
    overflow: 'hidden',
  },
  algorithmGradient: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 16,
    paddingHorizontal: 12,
    minHeight: 80,
  },
  algorithmButtonText: {
    color: '#fff',
    fontSize: 14,
    fontWeight: 'bold',
    marginLeft: 8,
    textAlign: 'center',
  },
  resultsSection: {
    padding: 20,
  },
  resultCard: {
    backgroundColor: '#fff',
    borderRadius: 16,
    padding: 20,
    marginBottom: 16,
    elevation: 4,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  resultHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 16,
  },
  resultName: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
  },
  statusIndicator: {
    width: 12,
    height: 12,
    borderRadius: 6,
  },
  resultDetails: {
    gap: 8,
  },
  resultRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  resultLabel: {
    fontSize: 14,
    color: '#666',
  },
  resultValue: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#333',
  },
  runningIndicator: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20,
  },
  runningText: {
    marginLeft: 8,
    color: '#FF9800',
    fontSize: 16,
  },
  errorText: {
    color: '#F44336',
    fontSize: 16,
    textAlign: 'center',
    padding: 20,
  },
  blockchainSection: {
    padding: 20,
    backgroundColor: '#fff',
    margin: 20,
    borderRadius: 16,
    elevation: 4,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  blockchainButtons: {
    gap: 12,
  },
  blockchainButton: {
    borderRadius: 12,
    overflow: 'hidden',
  },
  blockchainButtonGradient: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 16,
    paddingHorizontal: 24,
  },
  blockchainButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
    marginLeft: 12,
  },
  contractsSection: {
    padding: 20,
  },
  contractCard: {
    backgroundColor: '#fff',
    borderRadius: 16,
    padding: 20,
    marginBottom: 16,
    elevation: 4,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  contractHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  contractName: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
  },
  contractType: {
    fontSize: 12,
    color: '#666',
    backgroundColor: '#f0f0f0',
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12,
  },
  contractAddress: {
    fontSize: 12,
    color: '#666',
    marginBottom: 12,
    fontFamily: 'monospace',
  },
  contractStats: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  contractStat: {
    fontSize: 14,
    color: '#666',
  },
  transactionsSection: {
    padding: 20,
  },
  transactionCard: {
    backgroundColor: '#fff',
    borderRadius: 16,
    padding: 20,
    marginBottom: 16,
    elevation: 4,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  transactionHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  transactionHash: {
    fontSize: 14,
    color: '#333',
    fontFamily: 'monospace',
  },
  transactionAmount: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#4CAF50',
  },
  transactionFrom: {
    fontSize: 12,
    color: '#666',
    marginBottom: 4,
  },
  transactionTo: {
    fontSize: 12,
    color: '#666',
    marginBottom: 4,
  },
  transactionTime: {
    fontSize: 12,
    color: '#999',
  },
  infoSection: {
    padding: 20,
    backgroundColor: '#fff',
    margin: 20,
    borderRadius: 16,
    elevation: 4,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  infoText: {
    color: '#666',
    fontSize: 16,
    lineHeight: 24,
    marginBottom: 16,
  },
  techList: {
    gap: 8,
  },
  techItem: {
    color: '#666',
    fontSize: 14,
    lineHeight: 20,
  },
  techBold: {
    fontWeight: 'bold',
    color: '#333',
  },
});