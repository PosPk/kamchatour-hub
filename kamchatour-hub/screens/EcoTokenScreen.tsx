import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  Alert,
  Dimensions,
  FlatList,
  Image,
} from 'react-native';
import { LinearGradient } from 'react-native-linear-gradient';
import { MaterialIcons, MaterialCommunityIcons } from '@expo/vector-icons';
import { useQuantum } from '../contexts/QuantumContext';
import { KamchaEcoToken, KAMCHA_TOKEN_CONFIG, EcoAction } from '../features/ecoToken';

const { width } = Dimensions.get('window');

interface TokenBalance {
  kamcha: number;
  ecoScore: number;
  level: number;
  achievements: string[];
  stakedAmount: number;
  stakingRewards: number;
}

export default function EcoTokenScreen() {
  const { isBlockchainConnected, createSmartContract, executeTransaction } = useQuantum();
  
  const [tokenBalance, setTokenBalance] = useState<TokenBalance>({
    kamcha: 0,
    ecoScore: 0,
    level: 1,
    achievements: [],
    stakedAmount: 0,
    stakingRewards: 0
  });
  
  const [ecoActions, setEcoActions] = useState<EcoAction[]>([]);
  const [isProcessing, setIsProcessing] = useState(false);
  const [selectedAction, setSelectedAction] = useState<string | null>(null);

  useEffect(() => {
    loadTokenData();
    loadEcoActions();
  }, []);

  const loadTokenData = () => {
    // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞
    setTokenBalance({
      kamcha: 1250,
      ecoScore: 450,
      level: 4,
      achievements: ['üå± –≠–∫–æ-–Ω–æ–≤–∏—á–æ–∫', 'üåø –ó–∞—â–∏—Ç–Ω–∏–∫ –ø—Ä–∏—Ä–æ–¥—ã', 'üå≥ –•—Ä–∞–Ω–∏—Ç–µ–ª—å –ª–µ—Å–∞'],
      stakedAmount: 500,
      stakingRewards: 25
    });
  };

  const loadEcoActions = () => {
    const mockActions: EcoAction[] = [
      {
        id: '1',
        type: 'VOLCANO_CLEANUP',
        name: '–£–±–æ—Ä–∫–∞ –≤—É–ª–∫–∞–Ω–∞',
        description: '–£–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ –Ω–∞ —Å–∫–ª–æ–Ω–∞—Ö –≤—É–ª–∫–∞–Ω–æ–≤',
        points: 50,
        location: { latitude: 56.0569, longitude: 160.6428, name: '–ö–ª—é—á–µ–≤—Å–∫–∞—è —Å–æ–ø–∫–∞' },
        timestamp: Date.now() - 86400000, // 1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥
        proof: 'ipfs://QmHash1',
        verified: true
      },
      {
        id: '2',
        type: 'BEACH_CLEANUP',
        name: '–£–±–æ—Ä–∫–∞ –ø–ª—è–∂–∞',
        description: '–û—á–∏—Å—Ç–∫–∞ –ø–ª—è–∂–µ–π –æ—Ç –ø–ª–∞—Å—Ç–∏–∫–∞ –∏ –º—É—Å–æ—Ä–∞',
        points: 30,
        location: { latitude: 53.2556, longitude: 158.8306, name: '–ê–≤–∞—á–∏–Ω—Å–∫–∏–π –∑–∞–ª–∏–≤' },
        timestamp: Date.now() - 172800000, // 2 –¥–Ω—è –Ω–∞–∑–∞–¥
        proof: 'ipfs://QmHash2',
        verified: true
      },
      {
        id: '3',
        type: 'TREE_PLANTING',
        name: '–ü–æ—Å–∞–¥–∫–∞ –¥–µ—Ä–µ–≤—å–µ–≤',
        description: '–ü–æ—Å–∞–¥–∫–∞ —Å–∞–∂–µ–Ω—Ü–µ–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ª–µ—Å–æ–≤',
        points: 40,
        location: { latitude: 52.9634, longitude: 158.2345, name: '–ü–∞—Ä–∞—Ç—É–Ω–∫–∞' },
        timestamp: Date.now() - 259200000, // 3 –¥–Ω—è –Ω–∞–∑–∞–¥
        proof: 'ipfs://QmHash3',
        verified: false
      }
    ];

    setEcoActions(mockActions);
  };

  const performEcoAction = async (actionType: keyof typeof KAMCHA_TOKEN_CONFIG.ecoActions) => {
    if (!isBlockchainConnected) {
      Alert.alert('–û—à–∏–±–∫–∞', '–ë–ª–æ–∫—á–µ–π–Ω –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
      return;
    }

    setIsProcessing(true);
    try {
      // –°–æ–∑–¥–∞–µ–º —ç–∫–æ-–¥–µ–π—Å—Ç–≤–∏–µ
      const action = new KamchaEcoToken('0x1234...5678', {} as any).createEcoAction(
        actionType,
        { latitude: 56.0569, longitude: 160.6428, name: '–ö–ª—é—á–µ–≤—Å–∫–∞—è —Å–æ–ø–∫–∞' },
        `proof_${Date.now()}`
      );

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
      setEcoActions(prev => [action, ...prev]);

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
      const points = KAMCHA_TOKEN_CONFIG.ecoActions[actionType];
      const tokens = points * KAMCHA_TOKEN_CONFIG.ecoScoreMultiplier;
      
      setTokenBalance(prev => ({
        ...prev,
        ecoScore: prev.ecoScore + points,
        kamcha: prev.kamcha + tokens
      }));

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
      const newLevel = Math.floor((tokenBalance.ecoScore + points) / 100) + 1;
      if (newLevel > tokenBalance.level) {
        setTokenBalance(prev => ({ ...prev, level: newLevel }));
        Alert.alert('üéâ –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å!', `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ ${newLevel} —É—Ä–æ–≤–Ω—è!`);
      }

      Alert.alert(
        '‚úÖ –≠–∫–æ-–¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!',
        `–ù–∞—á–∏—Å–ª–µ–Ω–æ ${points} —ç–∫–æ-–±–∞–ª–ª–æ–≤ –∏ ${tokens} KAMCHA —Ç–æ–∫–µ–Ω–æ–≤!`
      );

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç–∫–æ-–¥–µ–π—Å—Ç–≤–∏—è:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç–∫–æ-–¥–µ–π—Å—Ç–≤–∏–µ');
    } finally {
      setIsProcessing(false);
    }
  };

  const stakeTokens = async (amount: number) => {
    if (!isBlockchainConnected) {
      Alert.alert('–û—à–∏–±–∫–∞', '–ë–ª–æ–∫—á–µ–π–Ω –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
      return;
    }

    if (amount > tokenBalance.kamcha) {
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Å—Ç–µ–π–∫–∏–Ω–≥–∞');
      return;
    }

    setIsProcessing(true);
    try {
      // –ò–º–∏—Ç–∞—Ü–∏—è —Å—Ç–µ–π–∫–∏–Ω–≥–∞
      await new Promise(resolve => setTimeout(resolve, 2000));

      setTokenBalance(prev => ({
        ...prev,
        kamcha: prev.kamcha - amount,
        stakedAmount: prev.stakedAmount + amount
      }));

      Alert.alert('‚úÖ –¢–æ–∫–µ–Ω—ã –∑–∞—Å—Ç–µ–π–∫–∞–Ω—ã!', `–ó–∞—Å—Ç–µ–π–∫–∞–Ω–æ ${amount} KAMCHA —Ç–æ–∫–µ–Ω–æ–≤`);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å—Ç–µ–π–∫–∏–Ω–≥–∞:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Å—Ç–µ–π–∫–∞—Ç—å —Ç–æ–∫–µ–Ω—ã');
    } finally {
      setIsProcessing(false);
    }
  };

  const claimRewards = async () => {
    if (tokenBalance.stakingRewards <= 0) {
      Alert.alert('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–ù–µ—Ç –Ω–∞–≥—Ä–∞–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è');
      return;
    }

    setIsProcessing(true);
    try {
      // –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥
      await new Promise(resolve => setTimeout(resolve, 1500));

      setTokenBalance(prev => ({
        ...prev,
        kamcha: prev.kamcha + prev.stakingRewards,
        stakingRewards: 0
      }));

      Alert.alert('‚úÖ –ù–∞–≥—Ä–∞–¥—ã –ø–æ–ª—É—á–µ–Ω—ã!', `–ü–æ–ª—É—á–µ–Ω–æ ${tokenBalance.stakingRewards} KAMCHA —Ç–æ–∫–µ–Ω–æ–≤`);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—ã');
    } finally {
      setIsProcessing(false);
    }
  };

  const renderEcoAction = ({ item }: { item: EcoAction }) => (
    <View style={styles.actionCard}>
      <View style={styles.actionHeader}>
        <Text style={styles.actionName}>{item.name}</Text>
        <View style={styles.actionPoints}>
          <Text style={styles.pointsText}>+{item.points}</Text>
        </View>
      </View>
      
      <Text style={styles.actionDescription}>{item.description}</Text>
      
      <View style={styles.actionDetails}>
        <View style={styles.detailItem}>
          <MaterialIcons name="location-on" size={16} color="#666" />
          <Text style={styles.detailText}>{item.location.name}</Text>
        </View>
        <View style={styles.detailItem}>
          <MaterialIcons name="schedule" size={16} color="#666" />
          <Text style={styles.detailText}>
            {new Date(item.timestamp).toLocaleDateString()}
          </Text>
        </View>
        <View style={styles.detailItem}>
          <MaterialCommunityIcons 
            name={item.verified ? "check-circle" : "clock"} 
            size={16} 
            color={item.verified ? "#4CAF50" : "#FF9800"} 
          />
          <Text style={styles.detailText}>
            {item.verified ? '–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ' : '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ'}
          </Text>
        </View>
      </View>
    </View>
  );

  const renderAchievement = ({ item }: { item: string }) => (
    <View style={styles.achievementChip}>
      <Text style={styles.achievementText}>{item}</Text>
    </View>
  );

  return (
    <ScrollView style={styles.container}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <LinearGradient
        colors={['#4CAF50', '#45B7D1']}
        style={styles.header}
      >
        <MaterialCommunityIcons name="leaf" size={40} color="#fff" />
        <Text style={styles.headerTitle}>KAMCHA –≠–∫–æ-—Ç–æ–∫–µ–Ω—ã</Text>
        <Text style={styles.headerSubtitle}>
          –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ —Ç–æ–∫–µ–Ω—ã –∑–∞ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        </Text>
      </LinearGradient>

      {/* –°—Ç–∞—Ç—É—Å –±–ª–æ–∫—á–µ–π–Ω–∞ */}
      <View style={styles.blockchainStatus}>
        <MaterialCommunityIcons 
          name={isBlockchainConnected ? "check-circle" : "close-circle"} 
          size={24} 
          color={isBlockchainConnected ? "#4CAF50" : "#F44336"} 
        />
        <Text style={styles.blockchainStatusText}>
          –ë–ª–æ–∫—á–µ–π–Ω: {isBlockchainConnected ? '–ü–æ–¥–∫–ª—é—á–µ–Ω' : '–û—Ç–∫–ª—é—á–µ–Ω'}
        </Text>
      </View>

      {/* –ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤ */}
      <View style={styles.balanceSection}>
        <Text style={styles.sectionTitle}>üí∞ –ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤</Text>
        
        <View style={styles.balanceGrid}>
          <View style={styles.balanceCard}>
            <MaterialCommunityIcons name="currency-btc" size={32} color="#4CAF50" />
            <Text style={styles.balanceAmount}>{tokenBalance.kamcha}</Text>
            <Text style={styles.balanceLabel}>KAMCHA</Text>
          </View>
          
          <View style={styles.balanceCard}>
            <MaterialCommunityIcons name="leaf" size={32} color="#45B7D1" />
            <Text style={styles.balanceAmount}>{tokenBalance.ecoScore}</Text>
            <Text style={styles.balanceLabel}>–≠–∫–æ-–±–∞–ª–ª—ã</Text>
          </View>
          
          <View style={styles.balanceCard}>
            <MaterialCommunityIcons name="star" size={32} color="#FFD700" />
            <Text style={styles.balanceAmount}>{tokenBalance.level}</Text>
            <Text style={styles.balanceLabel}>–£—Ä–æ–≤–µ–Ω—å</Text>
          </View>
          
          <View style={styles.balanceCard}>
            <MaterialCommunityIcons name="lock" size={32} color="#FF9800" />
            <Text style={styles.balanceAmount}>{tokenBalance.stakedAmount}</Text>
            <Text style={styles.balanceLabel}>–ó–∞—Å—Ç–µ–π–∫–∞–Ω–æ</Text>
          </View>
        </View>
      </View>

      {/* –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è */}
      <View style={styles.achievementsSection}>
        <Text style={styles.sectionTitle}>üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</Text>
        <FlatList
          data={tokenBalance.achievements}
          renderItem={renderAchievement}
          keyExtractor={item => item}
          horizontal
          showsHorizontalScrollIndicator={false}
          scrollEnabled={false}
        />
      </View>

      {/* –°—Ç–µ–π–∫–∏–Ω–≥ */}
      <View style={styles.stakingSection}>
        <Text style={styles.sectionTitle}>üîí –°—Ç–µ–π–∫–∏–Ω–≥ —Ç–æ–∫–µ–Ω–æ–≤</Text>
        
        <View style={styles.stakingInfo}>
          <Text style={styles.stakingText}>
            –ó–∞—Å—Ç–µ–π–∫–∞–Ω–æ: {tokenBalance.stakedAmount} KAMCHA
          </Text>
          <Text style={styles.stakingText}>
            –ù–∞–≥—Ä–∞–¥—ã: {tokenBalance.stakingRewards} KAMCHA
          </Text>
          <Text style={styles.stakingText}>
            APY: {KAMCHA_TOKEN_CONFIG.stakingRewards * 100}%
          </Text>
        </View>
        
        <View style={styles.stakingButtons}>
          <TouchableOpacity
            style={styles.stakeButton}
            onPress={() => stakeTokens(100)}
            disabled={isProcessing || tokenBalance.kamcha < 100}
          >
            <LinearGradient
              colors={['#4CAF50', '#45B7D1']}
              style={styles.stakeButtonGradient}
            >
              <Text style={styles.stakeButtonText}>–ó–∞—Å—Ç–µ–π–∫–∞—Ç—å 100 KAMCHA</Text>
            </LinearGradient>
          </TouchableOpacity>
          
          <TouchableOpacity
            style={styles.claimButton}
            onPress={claimRewards}
            disabled={isProcessing || tokenBalance.stakingRewards <= 0}
          >
            <LinearGradient
              colors={['#FF9800', '#FF5722']}
              style={styles.claimButtonGradient}
            >
              <Text style={styles.claimButtonText}>–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—ã</Text>
            </LinearGradient>
          </TouchableOpacity>
        </View>
      </View>

      {/* –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–∫–æ-–¥–µ–π—Å—Ç–≤–∏—è */}
      <View style={styles.actionsSection}>
        <Text style={styles.sectionTitle}>üå± –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–∫–æ-–¥–µ–π—Å—Ç–≤–∏—è</Text>
        <Text style={styles.sectionSubtitle}>
          –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —Ç–æ–∫–µ–Ω—ã
        </Text>
        
        <View style={styles.actionsGrid}>
          {Object.entries(KAMCHA_TOKEN_CONFIG.ecoActions).map(([actionType, points]) => (
            <TouchableOpacity
              key={actionType}
              style={styles.actionButton}
              onPress={() => performEcoAction(actionType as any)}
              disabled={isProcessing}
            >
              <LinearGradient
                colors={['#4CAF50', '#45B7D1']}
                style={styles.actionButtonGradient}
              >
                <Text style={styles.actionButtonText}>
                  {actionType.replace(/_/g, ' ')}
                </Text>
                <Text style={styles.actionButtonPoints}>+{points} –±–∞–ª–ª–æ–≤</Text>
              </LinearGradient>
            </TouchableOpacity>
          ))}
        </View>
      </View>

      {/* –ò—Å—Ç–æ—Ä–∏—è —ç–∫–æ-–¥–µ–π—Å—Ç–≤–∏–π */}
      <View style={styles.historySection}>
        <Text style={styles.sectionTitle}>üìã –ò—Å—Ç–æ—Ä–∏—è —ç–∫–æ-–¥–µ–π—Å—Ç–≤–∏–π</Text>
        <FlatList
          data={ecoActions}
          renderItem={renderEcoAction}
          keyExtractor={item => item.id}
          scrollEnabled={false}
        />
      </View>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ */}
      <View style={styles.infoSection}>
        <Text style={styles.sectionTitle}>‚ÑπÔ∏è –û —Ç–æ–∫–µ–Ω–µ KAMCHA</Text>
        <View style={styles.tokenInfo}>
          <Text style={styles.tokenInfoItem}>‚Ä¢ <Text style={styles.tokenInfoBold}>–ù–∞–∑–≤–∞–Ω–∏–µ:</Text> {KAMCHA_TOKEN_CONFIG.name}</Text>
          <Text style={styles.tokenInfoItem}>‚Ä¢ <Text style={styles.tokenInfoBold}>–°–∏–º–≤–æ–ª:</Text> {KAMCHA_TOKEN_CONFIG.symbol}</Text>
          <Text style={styles.tokenInfoItem}>‚Ä¢ <Text style={styles.tokenInfoBold}>–û–±—â–∏–π –æ–±—ä–µ–º:</Text> 1,000,000 KAMCHA</Text>
          <Text style={styles.tokenInfoItem}>‚Ä¢ <Text style={styles.tokenInfoBold}>–ú–Ω–æ–∂–∏—Ç–µ–ª—å:</Text> 1 —ç–∫–æ-–±–∞–ª–ª = {KAMCHA_TOKEN_CONFIG.ecoScoreMultiplier} KAMCHA</Text>
          <Text style={styles.tokenInfoItem}>‚Ä¢ <Text style={styles.tokenInfoBold}>–°—Ç–µ–π–∫–∏–Ω–≥:</Text> {KAMCHA_TOKEN_CONFIG.stakingRewards * 100}% –≥–æ–¥–æ–≤—ã—Ö</Text>
          <Text style={styles.tokenInfoItem}>‚Ä¢ <Text style={styles.tokenInfoBold}>–°–∂–∏–≥–∞–Ω–∏–µ:</Text> {KAMCHA_TOKEN_CONFIG.burnRate / 100}% –ø—Ä–∏ –∫–∞–∂–¥–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</Text>
        </View>
      </View>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  header: {
    padding: 30,
    alignItems: 'center',
  },
  headerTitle: {
    color: '#fff',
    fontSize: 28,
    fontWeight: 'bold',
    marginTop: 16,
    marginBottom: 8,
  },
  headerSubtitle: {
    color: '#fff',
    fontSize: 16,
    textAlign: 'center',
    opacity: 0.9,
  },
  blockchainStatus: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#fff',
    margin: 20,
    padding: 16,
    borderRadius: 16,
    elevation: 4,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  blockchainStatusText: {
    fontSize: 16,
    fontWeight: '600',
    marginLeft: 8,
    color: '#333',
  },
  balanceSection: {
    padding: 20,
    backgroundColor: '#fff',
    margin: 20,
    borderRadius: 16,
    elevation: 4,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  sectionTitle: {
    fontSize: 22,
    fontWeight: 'bold',
    marginBottom: 20,
    color: '#333',
  },
  balanceGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
  },
  balanceCard: {
    width: (width - 80) / 2,
    alignItems: 'center',
    padding: 16,
    marginBottom: 16,
  },
  balanceAmount: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#4CAF50',
    marginTop: 8,
    marginBottom: 4,
  },
  balanceLabel: {
    fontSize: 14,
    color: '#666',
    textAlign: 'center',
  },
  achievementsSection: {
    padding: 20,
  },
  achievementChip: {
    backgroundColor: '#e8f5e8',
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 20,
    marginRight: 12,
    borderWidth: 1,
    borderColor: '#4CAF50',
  },
  achievementText: {
    color: '#4CAF50',
    fontSize: 14,
    fontWeight: '600',
  },
  stakingSection: {
    padding: 20,
    backgroundColor: '#fff',
    margin: 20,
    borderRadius: 16,
    elevation: 4,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  stakingInfo: {
    marginBottom: 20,
  },
  stakingText: {
    fontSize: 16,
    color: '#666',
    marginBottom: 8,
  },
  stakingButtons: {
    gap: 12,
  },
  stakeButton: {
    borderRadius: 12,
    overflow: 'hidden',
  },
  stakeButtonGradient: {
    paddingVertical: 16,
    alignItems: 'center',
  },
  stakeButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
  claimButton: {
    borderRadius: 12,
    overflow: 'hidden',
  },
  claimButtonGradient: {
    paddingVertical: 16,
    alignItems: 'center',
  },
  claimButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
  actionsSection: {
    padding: 20,
    backgroundColor: '#fff',
    margin: 20,
    borderRadius: 16,
    elevation: 4,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  sectionSubtitle: {
    fontSize: 16,
    color: '#666',
    marginBottom: 20,
    lineHeight: 24,
  },
  actionsGrid: {
    gap: 12,
  },
  actionButton: {
    borderRadius: 12,
    overflow: 'hidden',
  },
  actionButtonGradient: {
    paddingVertical: 16,
    paddingHorizontal: 20,
    alignItems: 'center',
  },
  actionButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
    textAlign: 'center',
    marginBottom: 4,
  },
  actionButtonPoints: {
    color: '#fff',
    fontSize: 14,
    opacity: 0.9,
  },
  historySection: {
    padding: 20,
  },
  actionCard: {
    backgroundColor: '#fff',
    borderRadius: 16,
    padding: 20,
    marginBottom: 16,
    elevation: 4,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  actionHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  actionName: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
    flex: 1,
  },
  actionPoints: {
    backgroundColor: '#4CAF50',
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 20,
  },
  pointsText: {
    color: '#fff',
    fontWeight: 'bold',
    fontSize: 14,
  },
  actionDescription: {
    fontSize: 16,
    color: '#666',
    lineHeight: 24,
    marginBottom: 16,
  },
  actionDetails: {
    gap: 8,
  },
  detailItem: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  detailText: {
    fontSize: 14,
    color: '#666',
    marginLeft: 4,
  },
  infoSection: {
    padding: 20,
    backgroundColor: '#fff',
    margin: 20,
    borderRadius: 16,
    elevation: 4,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  tokenInfo: {
    gap: 8,
  },
  tokenInfoItem: {
    color: '#666',
    fontSize: 14,
    lineHeight: 20,
  },
  tokenInfoBold: {
    fontWeight: 'bold',
    color: '#333',
  },
});