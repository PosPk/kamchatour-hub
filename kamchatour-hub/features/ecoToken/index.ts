import { ethers } from 'ethers';

// ABI –¥–ª—è —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ KAMCHA —Ç–æ–∫–µ–Ω–∞
export const KAMCHA_TOKEN_ABI = [
  "function name() view returns (string)",
  "function symbol() view returns (string)",
  "function decimals() view returns (uint8)",
  "function totalSupply() view returns (uint256)",
  "function balanceOf(address) view returns (uint256)",
  "function transfer(address to, uint256 amount) returns (bool)",
  "function mint(address to, uint256 amount)",
  "function burn(uint256 amount)",
  "function ecoScore(address user) view returns (uint256)",
  "function addEcoScore(address user, uint256 points)",
  "function getEcoRewards(address user) view returns (uint256)",
  "event Transfer(address indexed from, address indexed to, uint256 value)",
  "event EcoScoreUpdated(address indexed user, uint256 newScore, uint256 tokensEarned)"
];

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
export const KAMCHA_TOKEN_CONFIG = {
  name: "KAMCHA Eco Token",
  symbol: "KAMCHA",
  decimals: 18,
  initialSupply: ethers.utils.parseEther("1000000"), // 1,000,000 KAMCHA
  ecoScoreMultiplier: 10, // 1 —ç–∫–æ-–±–∞–ª–ª = 10 KAMCHA
  maxEcoScorePerDay: 100, // –ú–∞–∫—Å–∏–º—É–º —ç–∫–æ-–±–∞–ª–ª–æ–≤ –≤ –¥–µ–Ω—å
  stakingRewards: 0.05, // 5% –≥–æ–¥–æ–≤—ã—Ö –∑–∞ —Å—Ç–µ–π–∫–∏–Ω–≥
  burnRate: 0.02, // 2% —Ç–æ–∫–µ–Ω–æ–≤ —Å–∂–∏–≥–∞–µ—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  ecoActions: {
    VOLCANO_CLEANUP: 50,      // –£–±–æ—Ä–∫–∞ –≤—É–ª–∫–∞–Ω–∞
    BEACH_CLEANUP: 30,        // –£–±–æ—Ä–∫–∞ –ø–ª—è–∂–∞
    TREE_PLANTING: 40,        // –ü–æ—Å–∞–¥–∫–∞ –¥–µ—Ä–µ–≤—å–µ–≤
    WASTE_COLLECTION: 20,     // –°–±–æ—Ä –º—É—Å–æ—Ä–∞
    ECO_EDUCATION: 25,        // –≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ—Å–≤–µ—â–µ–Ω–∏–µ
    SUSTAINABLE_TRAVEL: 35,   // –£—Å—Ç–æ–π—á–∏–≤—ã–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è
    CARBON_OFFSET: 60,        // –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è —É–≥–ª–µ—Ä–æ–¥–∞
    WILDLIFE_PROTECTION: 45,  // –ó–∞—â–∏—Ç–∞ –¥–∏–∫–æ–π –ø—Ä–∏—Ä–æ–¥—ã
    WATER_CONSERVATION: 30,   // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ–¥—ã
    RENEWABLE_ENERGY: 50      // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º–æ–π —ç–Ω–µ—Ä–≥–∏–∏
  }
};

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
export interface EcoAction {
  id: string;
  type: keyof typeof KAMCHA_TOKEN_CONFIG.ecoActions;
  name: string;
  description: string;
  points: number;
  location: {
    latitude: number;
    longitude: number;
    name: string;
  };
  timestamp: number;
  proof: string; // IPFS hash –∏–ª–∏ —Ñ–æ—Ç–æ
  verified: boolean;
}

export interface EcoScore {
  userId: string;
  totalScore: number;
  dailyScore: number;
  weeklyScore: number;
  monthlyScore: number;
  tokensEarned: number;
  tokensStaked: number;
  stakingRewards: number;
  level: number;
  achievements: string[];
}

export interface TokenTransaction {
  hash: string;
  from: string;
  to: string;
  amount: number;
  type: 'mint' | 'transfer' | 'burn' | 'stake' | 'unstake' | 'reward';
  timestamp: number;
  ecoActionId?: string;
}

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–∫–æ-—Ç–æ–∫–µ–Ω–∞–º–∏
export class KamchaEcoToken {
  private provider: ethers.providers.Web3Provider;
  private signer: ethers.Signer;
  private contract: ethers.Contract;
  private contractAddress: string;

  constructor(contractAddress: string, provider: ethers.providers.Web3Provider) {
    this.provider = provider;
    this.signer = provider.getSigner();
    this.contractAddress = contractAddress;
    this.contract = new ethers.Contract(
      contractAddress,
      KAMCHA_TOKEN_ABI,
      this.signer
    );
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
  async getTokenInfo() {
    try {
      const [name, symbol, decimals, totalSupply] = await Promise.all([
        this.contract.name(),
        this.contract.symbol(),
        this.contract.decimals(),
        this.contract.totalSupply()
      ]);

      return {
        name,
        symbol,
        decimals: decimals.toString(),
        totalSupply: ethers.utils.formatEther(totalSupply)
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getBalance(address: string): Promise<string> {
    try {
      const balance = await this.contract.balanceOf(address);
      return ethers.utils.formatEther(balance);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —ç–∫–æ-—Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getEcoScore(address: string): Promise<number> {
    try {
      const score = await this.contract.ecoScore(address);
      return score.toNumber();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–∫–æ-—Å—á–µ—Ç–∞:', error);
      throw error;
    }
  }

  // –î–æ–±–∞–≤–∏—Ç—å —ç–∫–æ-–±–∞–ª–ª—ã –∏ –Ω–∞—á–∏—Å–ª–∏—Ç—å —Ç–æ–∫–µ–Ω—ã
  async addEcoScore(userAddress: string, action: EcoAction): Promise<boolean> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
      const currentDailyScore = await this.getDailyEcoScore(userAddress);
      if (currentDailyScore + action.points > KAMCHA_TOKEN_CONFIG.maxEcoScorePerDay) {
        throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —ç–∫–æ-–±–∞–ª–ª–æ–≤');
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —ç–∫–æ-–±–∞–ª–ª—ã
      const tx = await this.contract.addEcoScore(userAddress, action.points);
      await tx.wait();

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
      const tokensToMint = action.points * KAMCHA_TOKEN_CONFIG.ecoScoreMultiplier;
      
      // –ú–∏–Ω—Ç–∏–º —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const mintTx = await this.contract.mint(userAddress, tokensToMint);
      await mintTx.wait();

      console.log(`–ù–∞—á–∏—Å–ª–µ–Ω–æ ${tokensToMint} KAMCHA –∑–∞ —ç–∫–æ-–¥–µ–π—Å—Ç–≤–∏–µ`);
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–∫–æ-–±–∞–ª–ª–æ–≤:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –¥–Ω–µ–≤–Ω–æ–π —ç–∫–æ-—Å—á–µ—Ç
  async getDailyEcoScore(address: string): Promise<number> {
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–æ–≥–æ —Å—á–µ—Ç–∞
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0
    return 0;
  }

  // –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω—ã
  async transfer(to: string, amount: number): Promise<boolean> {
    try {
      const amountWei = ethers.utils.parseEther(amount.toString());
      const tx = await this.contract.transfer(to, amountWei);
      await tx.wait();
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–æ–≤:', error);
      throw error;
    }
  }

  // –°–∂–µ—á—å —Ç–æ–∫–µ–Ω—ã (–¥–ª—è –¥–µ—Ñ–ª—è—Ü–∏–∏)
  async burn(amount: number): Promise<boolean> {
    try {
      const amountWei = ethers.utils.parseEther(amount.toString());
      const tx = await this.contract.burn(amountWei);
      await tx.wait();
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–∂–∏–≥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤:', error);
      throw error;
    }
  }

  // –°—Ç–µ–π–∫–∏–Ω–≥ —Ç–æ–∫–µ–Ω–æ–≤
  async stake(amount: number): Promise<boolean> {
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å—Ç–µ–π–∫–∏–Ω–≥–∞
      // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true
      console.log(`–ó–∞—Å—Ç–µ–π–∫–∞–Ω–æ ${amount} KAMCHA`);
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å—Ç–µ–π–∫–∏–Ω–≥–∞:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ —Å—Ç–µ–π–∫–∏–Ω–≥
  async getStakingRewards(address: string): Promise<number> {
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–≥—Ä–∞–¥
      // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0
      return 0;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥ –∑–∞ —Å—Ç–µ–π–∫–∏–Ω–≥:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  async getTransactionHistory(address: string): Promise<TokenTransaction[]> {
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
      // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
      return [];
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
      throw error;
    }
  }

  // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–∫–æ-—Å—á–µ—Ç–∞
  calculateUserLevel(ecoScore: number): number {
    if (ecoScore < 100) return 1;
    if (ecoScore < 500) return 2;
    if (ecoScore < 1000) return 3;
    if (ecoScore < 2500) return 4;
    if (ecoScore < 5000) return 5;
    if (ecoScore < 10000) return 6;
    if (ecoScore < 25000) return 7;
    if (ecoScore < 50000) return 8;
    if (ecoScore < 100000) return 9;
    return 10; // –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
  }

  // –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getAchievements(ecoScore: number, level: number): string[] {
    const achievements: string[] = [];
    
    if (ecoScore >= 100) achievements.push('üå± –≠–∫–æ-–Ω–æ–≤–∏—á–æ–∫');
    if (ecoScore >= 500) achievements.push('üåø –ó–∞—â–∏—Ç–Ω–∏–∫ –ø—Ä–∏—Ä–æ–¥—ã');
    if (ecoScore >= 1000) achievements.push('üå≥ –•—Ä–∞–Ω–∏—Ç–µ–ª—å –ª–µ—Å–∞');
    if (ecoScore >= 2500) achievements.push('üèîÔ∏è –ó–∞—â–∏—Ç–Ω–∏–∫ –≤—É–ª–∫–∞–Ω–æ–≤');
    if (ecoScore >= 5000) achievements.push('üêª –î—Ä—É–≥ –º–µ–¥–≤–µ–¥–µ–π');
    if (ecoScore >= 10000) achievements.push('üåä –•—Ä–∞–Ω–∏—Ç–µ–ª—å –æ–∫–µ–∞–Ω–∞');
    if (ecoScore >= 25000) achievements.push('üåç –≠–∫–æ-–ª–µ–≥–µ–Ω–¥–∞');
    if (ecoScore >= 50000) achievements.push('‚ö° –ö–≤–∞–Ω—Ç–æ–≤—ã–π —ç–∫–æ–ª–æ–≥');
    if (ecoScore >= 100000) achievements.push('üëë –ö–æ—Ä–æ–ª—å –ö–∞–º—á–∞—Ç–∫–∏');
    
    if (level >= 5) achievements.push('‚≠ê –ó–≤–µ–∑–¥–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å');
    if (level >= 8) achievements.push('üíé –ê–ª–º–∞–∑–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å');
    if (level >= 10) achievements.push('üèÜ –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å');
    
    return achievements;
  }

  // –°–æ–∑–¥–∞—Ç—å —ç–∫–æ-–¥–µ–π—Å—Ç–≤–∏–µ
  createEcoAction(
    type: keyof typeof KAMCHA_TOKEN_CONFIG.ecoActions,
    location: { latitude: number; longitude: number; name: string },
    proof: string
  ): EcoAction {
    const action: EcoAction = {
      id: `eco_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      type,
      name: this.getEcoActionName(type),
      description: this.getEcoActionDescription(type),
      points: KAMCHA_TOKEN_CONFIG.ecoActions[type],
      location,
      timestamp: Date.now(),
      proof,
      verified: false
    };

    return action;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —ç–∫–æ-–¥–µ–π—Å—Ç–≤–∏—è
  private getEcoActionName(type: keyof typeof KAMCHA_TOKEN_CONFIG.ecoActions): string {
    const names = {
      VOLCANO_CLEANUP: '–£–±–æ—Ä–∫–∞ –≤—É–ª–∫–∞–Ω–∞',
      BEACH_CLEANUP: '–£–±–æ—Ä–∫–∞ –ø–ª—è–∂–∞',
      TREE_PLANTING: '–ü–æ—Å–∞–¥–∫–∞ –¥–µ—Ä–µ–≤—å–µ–≤',
      WASTE_COLLECTION: '–°–±–æ—Ä –º—É—Å–æ—Ä–∞',
      ECO_EDUCATION: '–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ—Å–≤–µ—â–µ–Ω–∏–µ',
      SUSTAINABLE_TRAVEL: '–£—Å—Ç–æ–π—á–∏–≤—ã–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è',
      CARBON_OFFSET: '–ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è —É–≥–ª–µ—Ä–æ–¥–∞',
      WILDLIFE_PROTECTION: '–ó–∞—â–∏—Ç–∞ –¥–∏–∫–æ–π –ø—Ä–∏—Ä–æ–¥—ã',
      WATER_CONSERVATION: '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ–¥—ã',
      RENEWABLE_ENERGY: '–í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º–∞—è —ç–Ω–µ—Ä–≥–∏—è'
    };
    return names[type];
  }

  // –ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —ç–∫–æ-–¥–µ–π—Å—Ç–≤–∏—è
  private getEcoActionDescription(type: keyof typeof KAMCHA_TOKEN_CONFIG.ecoActions): string {
    const descriptions = {
      VOLCANO_CLEANUP: '–£–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ –Ω–∞ —Å–∫–ª–æ–Ω–∞—Ö –≤—É–ª–∫–∞–Ω–æ–≤',
      BEACH_CLEANUP: '–û—á–∏—Å—Ç–∫–∞ –ø–ª—è–∂–µ–π –æ—Ç –ø–ª–∞—Å—Ç–∏–∫–∞ –∏ –º—É—Å–æ—Ä–∞',
      TREE_PLANTING: '–ü–æ—Å–∞–¥–∫–∞ —Å–∞–∂–µ–Ω—Ü–µ–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ª–µ—Å–æ–≤',
      WASTE_COLLECTION: '–°–±–æ—Ä –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —É—Ç–∏–ª–∏–∑–∞—Ü–∏—è –æ—Ç—Ö–æ–¥–æ–≤',
      ECO_EDUCATION: '–û–±—É—á–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∞–º',
      SUSTAINABLE_TRAVEL: '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —É–≥–ª–µ—Ä–æ–¥–Ω—ã–º —Å–ª–µ–¥–æ–º',
      CARBON_OFFSET: '–ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –≤—ã–±—Ä–æ—Å–æ–≤ CO2',
      WILDLIFE_PROTECTION: '–ó–∞—â–∏—Ç–∞ –¥–∏–∫–∏—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏ –∏—Ö —Å—Ä–µ–¥—ã –æ–±–∏—Ç–∞–Ω–∏—è',
      WATER_CONSERVATION: '–≠–∫–æ–Ω–æ–º–∏—è –∏ –∑–∞—â–∏—Ç–∞ –≤–æ–¥–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤',
      RENEWABLE_ENERGY: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–æ–ª–Ω–µ—á–Ω–æ–π –∏ –≤–µ—Ç—Ä–æ–≤–æ–π —ç–Ω–µ—Ä–≥–∏–∏'
    };
    return descriptions[type];
  }

  // –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —ç–∫–æ-–¥–µ–π—Å—Ç–≤–∏–µ
  async verifyEcoAction(actionId: string, verifierAddress: string): Promise<boolean> {
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
      // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true
      console.log(`–≠–∫–æ-–¥–µ–π—Å—Ç–≤–∏–µ ${actionId} –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${verifierAddress}`);
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —ç–∫–æ-–¥–µ–π—Å—Ç–≤–∏—è:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–∫–µ–Ω–∞
  async getTokenStats(): Promise<{
    totalSupply: string;
    circulatingSupply: string;
    burnedTokens: string;
    stakedTokens: string;
    totalEcoScore: number;
    activeUsers: number;
  }> {
    try {
      const totalSupply = await this.contract.totalSupply();
      
      return {
        totalSupply: ethers.utils.formatEther(totalSupply),
        circulatingSupply: ethers.utils.formatEther(totalSupply), // –£–ø—Ä–æ—â–µ–Ω–Ω–æ
        burnedTokens: '0', // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –±—É–¥–µ—Ç —Ä–∞—Å—á–µ—Ç
        stakedTokens: '0', // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –±—É–¥–µ—Ç —Ä–∞—Å—á–µ—Ç
        totalEcoScore: 0, // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –±—É–¥–µ—Ç —Ä–∞—Å—á–µ—Ç
        activeUsers: 0 // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –±—É–¥–µ—Ç —Ä–∞—Å—á–µ—Ç
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–∫–µ–Ω–∞:', error);
      throw error;
    }
  }
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–∫–µ–Ω–∞–º–∏
export class KamchaTokenUtils {
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
  static formatTokens(amount: number, decimals: number = 18): string {
    return ethers.utils.formatUnits(amount, decimals);
  }

  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ wei
  static parseTokens(amount: string, decimals: number = 18): ethers.BigNumber {
    return ethers.utils.parseUnits(amount, decimals);
  }

  // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–æ–º–∏—Å—Å–∏—é –∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
  static calculateTransactionFee(gasPrice: ethers.BigNumber, gasLimit: number): string {
    const fee = gasPrice.mul(gasLimit);
    return ethers.utils.formatEther(fee);
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞
  static isValidAddress(address: string): boolean {
    return ethers.utils.isAddress(address);
  }

  // –°–æ–∫—Ä–∞—Ç–∏—Ç—å –∞–¥—Ä–µ—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  static shortenAddress(address: string, chars: number = 4): string {
    return `${address.substring(0, chars + 2)}...${address.substring(42 - chars)}`;
  }

  // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å APY –¥–ª—è —Å—Ç–µ–π–∫–∏–Ω–≥–∞
  static calculateStakingAPY(
    stakedAmount: number,
    rewardRate: number,
    timePeriod: number
  ): number {
    return (rewardRate / stakedAmount) * (365 * 24 * 60 * 60 / timePeriod) * 100;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
export default KamchaEcoToken;