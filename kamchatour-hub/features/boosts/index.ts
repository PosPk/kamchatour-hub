export interface Boost {
  id: string;
  name: string;
  type: BoostType;
  category: BoostCategory;
  description: string;
  price: number;
  duration: number; // –≤ —á–∞—Å–∞—Ö
  maxParticipants: number;
  availability: AvailabilityStatus;
  location: [number, number];
  requirements: string[];
  included: string[];
  excluded: string[];
  images: string[];
  rating: number; // 0-5
  reviews: BoostReview[];
  provider: BoostProvider;
  tags: string[];
  createdAt: Date;
  updatedAt: Date;
}

export type BoostType = 
  | 'experience' | 'convenience' | 'safety' | 'luxury' | 'exclusive' | 'group';

export type BoostCategory = 
  | 'helicopter' | 'guide' | 'transport' | 'accommodation' | 'activities' | 'food' | 'equipment';

export type AvailabilityStatus = 
  | 'available' | 'limited' | 'unavailable' | 'seasonal' | 'weather_dependent';

export interface BoostReview {
  id: string;
  userId: string;
  rating: number;
  comment: string;
  photos: string[];
  createdAt: Date;
  helpful: number;
}

export interface BoostProvider {
  id: string;
  name: string;
  type: 'company' | 'individual' | 'government';
  rating: number;
  verified: boolean;
  experience: number; // –≥–æ–¥—ã –æ–ø—ã—Ç–∞
  licenses: string[];
  insurance: boolean;
  contactInfo: ContactInfo;
  website?: string;
  logo: string;
}

export interface ContactInfo {
  phone: string;
  email: string;
  whatsapp?: string;
  telegram?: string;
  instagram?: string;
}

export interface BoostBooking {
  id: string;
  boostId: string;
  userId: string;
  startDate: Date;
  endDate: Date;
  participants: number;
  totalPrice: number;
  status: BookingStatus;
  specialRequests: string[];
  paymentStatus: PaymentStatus;
  createdAt: Date;
  updatedAt: Date;
}

export type BookingStatus = 
  | 'pending' | 'confirmed' | 'in_progress' | 'completed' | 'cancelled' | 'refunded';

export type PaymentStatus = 
  | 'pending' | 'paid' | 'failed' | 'refunded' | 'partial';

export class BoostSystem {
  private boosts: Map<string, Boost> = new Map();
  private bookings: Map<string, BoostBooking> = new Map();
  private providers: Map<string, BoostProvider> = new Map();
  private boostRecommender: BoostRecommender;
  private availabilityChecker: AvailabilityChecker;
  private pricingEngine: PricingEngine;

  constructor() {
    this.initializeBoostSystem();
  }

  private async initializeBoostSystem() {
    console.log('üí™ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –±—É—Å—Ç–æ–≤ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥...');
    
    await this.initializeBoostRecommender();
    await this.initializeAvailabilityChecker();
    await this.initializePricingEngine();
    await this.loadBoostProviders();
    await this.loadDefaultBoosts();
    
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –±—É—Å—Ç–æ–≤ –≥–æ—Ç–æ–≤–∞!');
  }

  private async initializeBoostRecommender(): Promise<void> {
    this.boostRecommender = new BoostRecommender();
    await this.boostRecommender.initialize();
  }

  private async initializeAvailabilityChecker(): Promise<void> {
    this.availabilityChecker = new AvailabilityChecker();
    await this.availabilityChecker.initialize();
  }

  private async initializePricingEngine(): Promise<void> {
    this.pricingEngine = new PricingEngine();
    await this.pricingEngine.initialize();
  }

  private async loadBoostProviders(): Promise<void> {
    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –±—É—Å—Ç–æ–≤ –Ω–∞ –ö–∞–º—á–∞—Ç–∫–µ
    const providers: BoostProvider[] = [
      {
        id: 'kamchatka_helicopters',
        name: '–ö–∞–º—á–∞—Ç—Å–∫–∏–µ –í–µ—Ä—Ç–æ–ª–µ—Ç—ã',
        type: 'company',
        rating: 4.8,
        verified: true,
        experience: 15,
        licenses: ['–ê–≤–∏–∞—Ü–∏–æ–Ω–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è', '–¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è'],
        insurance: true,
        contactInfo: {
          phone: '+7-415-200-0000',
          email: 'info@kamchatka-helicopters.ru',
          whatsapp: '+7-900-000-0000',
          telegram: '@kamchatka_helicopters'
        },
        website: 'https://kamchatka-helicopters.ru',
        logo: 'kamchatka-helicopters-logo.png'
      },
      {
        id: 'bear_experts',
        name: '–≠–∫—Å–ø–µ—Ä—Ç—ã –ø–æ –ú–µ–¥–≤–µ–¥—è–º',
        type: 'company',
        rating: 4.9,
        verified: true,
        experience: 20,
        licenses: ['–ë–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è', '–¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è'],
        insurance: true,
        contactInfo: {
          phone: '+7-415-200-0001',
          email: 'info@bear-experts.ru',
          whatsapp: '+7-900-000-0001',
          telegram: '@bear_experts'
        },
        website: 'https://bear-experts.ru',
        logo: 'bear-experts-logo.png'
      },
      {
        id: 'volcano_guides',
        name: '–ì–∏–¥—ã –ø–æ –í—É–ª–∫–∞–Ω–∞–º',
        type: 'company',
        rating: 4.7,
        verified: true,
        experience: 12,
        licenses: ['–ì–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è', '–¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è'],
        insurance: true,
        contactInfo: {
          phone: '+7-415-200-0002',
          email: 'info@volcano-guides.ru',
          whatsapp: '+7-900-000-0002',
          telegram: '@volcano_guides'
        },
        website: 'https://volcano-guides.ru',
        logo: 'volcano-guides-logo.png'
      },
      {
        id: 'kamchatka_luxury',
        name: '–ö–∞–º—á–∞—Ç—Å–∫–∞—è –†–æ—Å–∫–æ—à—å',
        type: 'company',
        rating: 5.0,
        verified: true,
        experience: 8,
        licenses: ['–¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è', '–†–µ—Å—Ç–æ—Ä–∞–Ω–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è'],
        insurance: true,
        contactInfo: {
          phone: '+7-415-200-0003',
          email: 'info@kamchatka-luxury.ru',
          whatsapp: '+7-900-000-0003',
          telegram: '@kamchatka_luxury'
        },
        website: 'https://kamchatka-luxury.ru',
        logo: 'kamchatka-luxury-logo.png'
      }
    ];

    providers.forEach(provider => {
      this.providers.set(provider.id, provider);
    });
  }

  private async loadDefaultBoosts(): Promise<void> {
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –±—É—Å—Ç–æ–≤ –¥–ª—è –ö–∞–º—á–∞—Ç–∫–∏
    const defaultBoosts: Boost[] = [
      {
        id: 'helicopter_volcano_tour',
        name: '–í–µ—Ä—Ç–æ–ª–µ—Ç–Ω—ã–π —Ç—É—Ä –∫ –≤—É–ª–∫–∞–Ω–∞–º',
        type: 'experience',
        category: 'helicopter',
        description: '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –≤–µ—Ä—Ç–æ–ª–µ—Ç–Ω—ã–π —Ç—É—Ä –∫ —Å–∞–º—ã–º –∫—Ä–∞—Å–∏–≤—ã–º –≤—É–ª–∫–∞–Ω–∞–º –ö–∞–º—á–∞—Ç–∫–∏ —Å –ø–æ—Å–∞–¥–∫–æ–π –∏ –ø—Ä–æ–≥—É–ª–∫–æ–π',
        price: 25000,
        duration: 4,
        maxParticipants: 6,
        availability: 'weather_dependent',
        location: [56.1327, 158.3803], // –ö–ª—é—á–µ–≤—Å–∫–∞—è —Å–æ–ø–∫–∞
        requirements: ['–í–æ–∑—Ä–∞—Å—Ç 18+', '–•–æ—Ä–æ—à–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º–∞', '–¢–µ–ø–ª–∞—è –æ–¥–µ–∂–¥–∞'],
        included: ['–í–µ—Ä—Ç–æ–ª–µ—Ç', '–ü–∏–ª–æ—Ç', '–ì–∏–¥-–≥–µ–æ–ª–æ–≥', '–û–±–µ–¥', '–°—Ç—Ä–∞—Ö–æ–≤–∫–∞', '–§–æ—Ç–æ—Å—ä–µ–º–∫–∞'],
        excluded: ['–õ–∏—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã', '–°—É–≤–µ–Ω–∏—Ä—ã'],
        images: ['helicopter_volcano_1.jpg', 'helicopter_volcano_2.jpg'],
        rating: 4.9,
        reviews: [],
        provider: this.providers.get('kamchatka_helicopters')!,
        tags: ['–≤–µ—Ä—Ç–æ–ª–µ—Ç', '–≤—É–ª–∫–∞–Ω', '—ç–∫—Å–∫–ª—é–∑–∏–≤', '–≥–µ–æ–ª–æ–≥–∏—è'],
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        id: 'bear_watching_premium',
        name: '–ü—Ä–µ–º–∏—É–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –º–µ–¥–≤–µ–¥—è–º–∏',
        type: 'exclusive',
        category: 'activities',
        description: '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –º–µ–¥–≤–µ–¥—è–º–∏ –≤ –¥–∏–∫–æ–π –ø—Ä–∏—Ä–æ–¥–µ —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –±–∏–æ–ª–æ–≥–∞–º–∏',
        price: 15000,
        duration: 8,
        maxParticipants: 4,
        availability: 'seasonal',
        location: [51.4567, 157.1234], // –ö—É—Ä–∏–ª—å—Å–∫–æ–µ –æ–∑–µ—Ä–æ
        requirements: ['–í–æ–∑—Ä–∞—Å—Ç 16+', '–¢–∏—à–∏–Ω–∞', '–¢–µ—Ä–ø–µ–Ω–∏–µ'],
        included: ['–¢—Ä–∞–Ω—Å—Ñ–µ—Ä', '–ë–∏–æ–ª–æ–≥-–≥–∏–¥', '–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', '–û–±–µ–¥', '–°—Ç—Ä–∞—Ö–æ–≤–∫–∞', '–§–æ—Ç–æ—Å—ä–µ–º–∫–∞'],
        excluded: ['–õ–∏—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã', '–°—É–≤–µ–Ω–∏—Ä—ã'],
        images: ['bear_watching_1.jpg', 'bear_watching_2.jpg'],
        rating: 4.9,
        reviews: [],
        provider: this.providers.get('bear_experts')!,
        tags: ['–º–µ–¥–≤–µ–¥–∏', '–¥–∏–∫–∞—è –ø—Ä–∏—Ä–æ–¥–∞', '–±–∏–æ–ª–æ–≥–∏—è', '—Ñ–æ—Ç–æ–æ—Ö–æ—Ç–∞'],
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        id: 'volcano_climbing_guide',
        name: '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–∏–¥ –¥–ª—è –≤–æ—Å—Ö–æ–∂–¥–µ–Ω–∏—è –Ω–∞ –≤—É–ª–∫–∞–Ω',
        type: 'safety',
        category: 'guide',
        description: '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –≥–∏–¥ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤–æ—Å—Ö–æ–∂–¥–µ–Ω–∏—è –Ω–∞ –≤—É–ª–∫–∞–Ω —Å –ø–æ–ª–Ω—ã–º —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ–º',
        price: 8000,
        duration: 12,
        maxParticipants: 2,
        availability: 'weather_dependent',
        location: [56.1327, 158.3803], // –ö–ª—é—á–µ–≤—Å–∫–∞—è —Å–æ–ø–∫–∞
        requirements: ['–í–æ–∑—Ä–∞—Å—Ç 18+', '–û—Ç–ª–∏—á–Ω–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º–∞', '–û–ø—ã—Ç –≥–æ—Ä–Ω—ã—Ö –ø–æ—Ö–æ–¥–æ–≤'],
        included: ['–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–∏–¥', '–°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ', '–°—Ç—Ä–∞—Ö–æ–≤–∫–∞', '–ü–∏—Ç–∞–Ω–∏–µ', '–¢—Ä–∞–Ω—Å—Ñ–µ—Ä'],
        excluded: ['–õ–∏—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã', '–°—É–≤–µ–Ω–∏—Ä—ã'],
        images: ['volcano_climbing_1.jpg', 'volcano_climbing_2.jpg'],
        rating: 4.8,
        reviews: [],
        provider: this.providers.get('volcano_guides')!,
        tags: ['–≤—É–ª–∫–∞–Ω', '–≤–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ', '–≥–∏–¥', '–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å'],
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        id: 'luxury_thermal_bath',
        name: '–†–æ—Å–∫–æ—à–Ω—ã–µ —Ç–µ—Ä–º–∞–ª—å–Ω—ã–µ –≤–∞–Ω–Ω—ã',
        type: 'luxury',
        category: 'accommodation',
        description: '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ç–µ—Ä–º–∞–ª—å–Ω—ã–µ –≤–∞–Ω–Ω—ã —Å –≤–∏–¥–æ–º –Ω–∞ –≤—É–ª–∫–∞–Ω—ã –∏ VIP –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ–º',
        price: 12000,
        duration: 3,
        maxParticipants: 2,
        availability: 'available',
        location: [52.9876, 158.5678], // –ü–∞—Ä–∞—Ç—É–Ω–∫–∞
        requirements: ['–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞ 24 —á–∞—Å–∞', '–í–æ–∑—Ä–∞—Å—Ç 18+'],
        included: ['–ü—Ä–∏–≤–∞—Ç–Ω—ã–µ —Ç–µ—Ä–º–∞–ª—å–Ω—ã–µ –≤–∞–Ω–Ω—ã', 'VIP –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ', '–®–∞–º–ø–∞–Ω—Å–∫–æ–µ', '–ú–∞—Å—Å–∞–∂', '–£–∂–∏–Ω'],
        excluded: ['–¢—Ä–∞–Ω—Å—Ñ–µ—Ä', '–õ–∏—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã'],
        images: ['thermal_bath_1.jpg', 'thermal_bath_2.jpg'],
        rating: 5.0,
        reviews: [],
        provider: this.providers.get('kamchatka_luxury')!,
        tags: ['—Ç–µ—Ä–º–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏', '—Ä–æ—Å–∫–æ—à—å', 'VIP', '—Ä–µ–ª–∞–∫—Å'],
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        id: 'fishing_masterclass',
        name: '–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –ø–æ —Ä—ã–±–∞–ª–∫–µ –Ω–∞ –ö–∞–º—á–∞—Ç–∫–µ',
        type: 'experience',
        category: 'activities',
        description: '–û–±—É—á–µ–Ω–∏–µ —Ä—ã–±–∞–ª–∫–µ –Ω–∞ –ª–æ—Å–æ—Å—è —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ —Ä—ã–±–∞–∫–∞–º–∏ –≤ –¥–∏–∫–∏—Ö —Ä–µ–∫–∞—Ö',
        price: 6000,
        duration: 6,
        maxParticipants: 3,
        availability: 'seasonal',
        location: [53.1234, 158.7890], // –†–µ–∫–∞ –ö–∞–º—á–∞—Ç–∫–∞
        requirements: ['–í–æ–∑—Ä–∞—Å—Ç 16+', '–†—ã–±–æ–ª–æ–≤–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è', '–¢–µ–ø–ª–∞—è –æ–¥–µ–∂–¥–∞'],
        included: ['–°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ', '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä—ã–±–∞–∫', '–õ–∏—Ü–µ–Ω–∑–∏—è', '–û–±–µ–¥', '–¢—Ä–∞–Ω—Å—Ñ–µ—Ä'],
        excluded: ['–õ–∏—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã', '–°—É–≤–µ–Ω–∏—Ä—ã'],
        images: ['fishing_1.jpg', 'fishing_2.jpg'],
        rating: 4.7,
        reviews: [],
        provider: this.providers.get('bear_experts')!,
        tags: ['—Ä—ã–±–∞–ª–∫–∞', '–ª–æ—Å–æ—Å—å', '–æ–±—É—á–µ–Ω–∏–µ', '–¥–∏–∫–∞—è –ø—Ä–∏—Ä–æ–¥–∞'],
        createdAt: new Date(),
        updatedAt: new Date()
      }
    ];

    defaultBoosts.forEach(boost => {
      this.boosts.set(boost.id, boost);
    });
  }

  async getBoosts(
    filters?: BoostFilters,
    location?: [number, number],
    radius?: number
  ): Promise<Boost[]> {
    
    let filteredBoosts = Array.from(this.boosts.values());
    
    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    if (filters) {
      filteredBoosts = this.applyFilters(filteredBoosts, filters);
    }
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é
    if (location && radius) {
      filteredBoosts = filteredBoosts.filter(boost => 
        this.isWithinRadius(boost.location, location, radius)
      );
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    filteredBoosts = await this.checkAvailability(filteredBoosts);
    
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É –∏ —Ü–µ–Ω–µ
    return filteredBoosts.sort((a, b) => {
      const ratingScore = b.rating - a.rating;
      const priceScore = a.price - b.price;
      return ratingScore * 10 + priceScore * 0.001;
    });
  }

  private applyFilters(boosts: Boost[], filters: BoostFilters): Boost[] {
    return boosts.filter(boost => {
      if (filters.type && boost.type !== filters.type) return false;
      if (filters.category && boost.category !== filters.category) return false;
      if (filters.maxPrice && boost.price > filters.maxPrice) return false;
      if (filters.minRating && boost.rating < filters.minRating) return false;
      if (filters.availability && boost.availability !== filters.availability) return false;
      if (filters.tags && !filters.tags.some(tag => boost.tags.includes(tag))) return false;
      return true;
    });
  }

  private isWithinRadius(
    boostLocation: [number, number], 
    userLocation: [number, number], 
    radius: number
  ): boolean {
    const distance = this.calculateDistance(boostLocation, userLocation);
    return distance <= radius;
  }

  private calculateDistance(
    point1: [number, number], 
    point2: [number, number]
  ): number {
    const R = 6371; // —Ä–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–º
    const dLat = (point2[0] - point1[0]) * Math.PI / 180;
    const dLon = (point2[1] - point1[1]) * Math.PI / 180;
    const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
              Math.cos(point1[0] * Math.PI / 180) * Math.cos(point2[0] * Math.PI / 180) *
              Math.sin(dLon/2) * Math.sin(dLon/2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    return R * c;
  }

  private async checkAvailability(boosts: Boost[]): Promise<Boost[]> {
    const availableBoosts: Boost[] = [];
    
    for (const boost of boosts) {
      const isAvailable = await this.availabilityChecker.checkBoostAvailability(boost);
      if (isAvailable) {
        availableBoosts.push(boost);
      }
    }
    
    return availableBoosts;
  }

  async getBoostRecommendations(
    userId: string,
    tripDetails: TripDetails,
    preferences: UserPreferences
  ): Promise<Boost[]> {
    
    return await this.boostRecommender.getRecommendations(
      userId,
      tripDetails,
      preferences,
      Array.from(this.boosts.values())
    );
  }

  async bookBoost(
    boostId: string,
    userId: string,
    bookingDetails: BookingDetails
  ): Promise<BoostBooking> {
    
    const boost = this.boosts.get(boostId);
    if (!boost) {
      throw new Error('–ë—É—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    const isAvailable = await this.availabilityChecker.checkBoostAvailability(boost);
    if (!isAvailable) {
      throw new Error('–ë—É—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É');
    }
    
    // –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã
    const totalPrice = await this.pricingEngine.calculatePrice(boost, bookingDetails);
    
    const booking: BoostBooking = {
      id: this.generateBookingId(),
      boostId,
      userId,
      startDate: bookingDetails.startDate,
      endDate: bookingDetails.endDate,
      participants: bookingDetails.participants,
      totalPrice,
      status: 'pending',
      specialRequests: bookingDetails.specialRequests || [],
      paymentStatus: 'pending',
      createdAt: new Date(),
      updatedAt: new Date()
    };
    
    this.bookings.set(booking.id, booking);
    
    return booking;
  }

  async getBoost(boostId: string): Promise<Boost | null> {
    return this.boosts.get(boostId) || null;
  }

  async getBooking(bookingId: string): Promise<BoostBooking | null> {
    return this.bookings.get(bookingId) || null;
  }

  async getUserBookings(userId: string): Promise<BoostBooking[]> {
    return Array.from(this.bookings.values())
      .filter(booking => booking.userId === userId);
  }

  async cancelBooking(bookingId: string, userId: string): Promise<boolean> {
    const booking = this.bookings.get(bookingId);
    if (!booking || booking.userId !== userId) {
      return false;
    }
    
    if (booking.status === 'confirmed' || booking.status === 'pending') {
      booking.status = 'cancelled';
      booking.updatedAt = new Date();
      return true;
    }
    
    return false;
  }

  async addBoostReview(
    boostId: string,
    userId: string,
    review: Omit<BoostReview, 'id' | 'createdAt' | 'helpful'>
  ): Promise<BoostReview> {
    
    const boost = this.boosts.get(boostId);
    if (!boost) {
      throw new Error('–ë—É—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    const newReview: BoostReview = {
      id: this.generateReviewId(),
      userId,
      rating: review.rating,
      comment: review.comment,
      photos: review.photos,
      createdAt: new Date(),
      helpful: 0
    };
    
    boost.reviews.push(newReview);
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –±—É—Å—Ç–∞
    const totalRating = boost.reviews.reduce((sum, r) => sum + r.rating, 0);
    boost.rating = totalRating / boost.reviews.length;
    boost.updatedAt = new Date();
    
    return newReview;
  }

  private generateBookingId(): string {
    return `booking_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  private generateReviewId(): string {
    return `review_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã
class BoostRecommender {
  async initialize(): Promise<void> {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –±—É—Å—Ç–æ–≤...');
  }

  async getRecommendations(
    userId: string,
    tripDetails: TripDetails,
    preferences: UserPreferences,
    availableBoosts: Boost[]
  ): Promise<Boost[]> {
    // –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –∏ –¥–µ—Ç–∞–ª–µ–π –ø–æ–µ–∑–¥–∫–∏
    const scoredBoosts = availableBoosts.map(boost => ({
      boost,
      score: this.calculateBoostScore(boost, tripDetails, preferences)
    }));
    
    return scoredBoosts
      .sort((a, b) => b.score - a.score)
      .slice(0, 10)
      .map(item => item.boost);
  }

  private calculateBoostScore(
    boost: Boost, 
    tripDetails: TripDetails, 
    preferences: UserPreferences
  ): number {
    let score = boost.rating * 2; // –±–∞–∑–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥
    
    // –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º
    if (preferences.luxury && boost.type === 'luxury') score += 3;
    if (preferences.adventure && boost.type === 'experience') score += 3;
    if (preferences.safety && boost.type === 'safety') score += 2;
    
    // –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–µ–∑–æ–Ω—É
    if (boost.availability === 'seasonal' && this.isSeasonAppropriate(boost, tripDetails.season)) {
      score += 2;
    }
    
    // –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –±—é–¥–∂–µ—Ç—É
    if (boost.price <= tripDetails.budget * 0.3) score += 2;
    
    return score;
  }

  private isSeasonAppropriate(boost: Boost, season: string): boolean {
    // –õ–æ–≥–∏–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å–µ–∑–æ–Ω—É
    return true; // —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
  }
}

class AvailabilityChecker {
  async initialize(): Promise<void> {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏...');
  }

  async checkBoostAvailability(boost: Boost): Promise<boolean> {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±—É—Å—Ç–∞
    if (boost.availability === 'unavailable') return false;
    if (boost.availability === 'weather_dependent') {
      return await this.checkWeatherConditions(boost.location);
    }
    return true;
  }

  private async checkWeatherConditions(location: [number, number]): Promise<boolean> {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
    return Math.random() > 0.3; // 70% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ö–æ—Ä–æ—à–µ–π –ø–æ–≥–æ–¥—ã
  }
}

class PricingEngine {
  async initialize(): Promise<void> {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è...');
  }

  async calculatePrice(boost: Boost, bookingDetails: BookingDetails): Promise<number> {
    let basePrice = boost.price;
    
    // –ú–Ω–æ–∂–∏—Ç–µ–ª–∏ —Ü–µ–Ω—ã
    if (bookingDetails.participants > 1) {
      basePrice *= (1 + (bookingDetails.participants - 1) * 0.1); // 10% –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    }
    
    // –°–µ–∑–æ–Ω–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
    const season = this.getSeason(bookingDetails.startDate);
    if (season === 'winter') {
      basePrice *= 1.2; // –∑–∏–º–æ–π –¥–æ—Ä–æ–∂–µ
    } else if (season === 'summer') {
      basePrice *= 1.1; // –ª–µ—Ç–æ–º –Ω–µ–º–Ω–æ–≥–æ –¥–æ—Ä–æ–∂–µ
    }
    
    // –°–∫–∏–¥–∫–∏ –∑–∞ —Ä–∞–Ω–Ω–µ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    const daysUntilTrip = this.getDaysUntilTrip(bookingDetails.startDate);
    if (daysUntilTrip > 30) {
      basePrice *= 0.9; // 10% —Å–∫–∏–¥–∫–∞ –∑–∞ —Ä–∞–Ω–Ω–µ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    }
    
    return Math.round(basePrice);
  }

  private getSeason(date: Date): string {
    const month = date.getMonth();
    if (month >= 11 || month <= 2) return 'winter';
    if (month >= 3 && month <= 5) return 'spring';
    if (month >= 6 && month <= 8) return 'summer';
    return 'autumn';
  }

  private getDaysUntilTrip(startDate: Date): number {
    const now = new Date();
    const diffTime = startDate.getTime() - now.getTime();
    return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  }
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
export interface BoostFilters {
  type?: BoostType;
  category?: BoostCategory;
  maxPrice?: number;
  minRating?: number;
  availability?: AvailabilityStatus;
  tags?: string[];
}

export interface TripDetails {
  startDate: Date;
  endDate: Date;
  season: string;
  budget: number;
  participants: number;
  activities: string[];
}

export interface UserPreferences {
  luxury: boolean;
  adventure: boolean;
  safety: boolean;
  budget: boolean;
  comfort: boolean;
}

export interface BookingDetails {
  startDate: Date;
  endDate: Date;
  participants: number;
  specialRequests?: string[];
}

// –≠–∫—Å–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã
export const boostSystem = new BoostSystem();

export function getBoosts(
  filters?: BoostFilters,
  location?: [number, number],
  radius?: number
): Promise<Boost[]> {
  return boostSystem.getBoosts(filters, location, radius);
}

export function getBoostRecommendations(
  userId: string,
  tripDetails: TripDetails,
  preferences: UserPreferences
): Promise<Boost[]> {
  return boostSystem.getBoostRecommendations(userId, tripDetails, preferences);
}

export function bookBoost(
  boostId: string,
  userId: string,
  bookingDetails: BookingDetails
): Promise<BoostBooking> {
  return boostSystem.bookBoost(boostId, userId, bookingDetails);
}