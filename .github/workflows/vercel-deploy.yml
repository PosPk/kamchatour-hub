name: Vercel Deploy

on:
  push:
    branches: [ '**' ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - run: npm ci
      - run: npm run build
      - name: Install Vercel CLI
        run: npm i -g vercel
      - name: Vercel Link (optional by IDs)
        if: ${{ secrets.VERCEL_PROJECT_ID != '' && secrets.VERCEL_ORG_ID != '' }}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        run: vercel link --project "$VERCEL_PROJECT_ID" --scope "$VERCEL_ORG_ID" --token "$VERCEL_TOKEN" --yes
      - name: Pull env (preview)
        if: ${{ github.ref_name != 'main' }}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: vercel pull --yes --environment=preview --token "$VERCEL_TOKEN"
      - name: Pull env (production)
        if: ${{ github.ref_name == 'main' }}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: vercel pull --yes --environment=production --token "$VERCEL_TOKEN"
      - name: Deploy preview
        if: ${{ github.ref_name != 'main' }}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: vercel deploy --prebuilt --token "$VERCEL_TOKEN"
      - name: Deploy production
        if: ${{ github.ref_name == 'main' }}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: vercel deploy --prebuilt --token "$VERCEL_TOKEN" --prod
      - name: Cleanup artifacts
        if: always()
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh api repos/${{ github.repository }}/actions/artifacts --jq '.artifacts[] | select(.expired) | .id' | xargs -r -I {} gh api repos/${{ github.repository }}/actions/artifacts/{} -X DELETE