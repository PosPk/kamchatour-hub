name: Scaffold RTK App
on:
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  scaffold:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Configure git and branch
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git checkout -B feat/rtk-setup

      - name: Add deps (no install)
        run: |
          node -e "let p=require('./package.json');p.dependencies={...(p.dependencies||{}),'@reduxjs/toolkit':'^2.2.7','react-redux':'^9.2.0','redux-persist':'^6.0.0','@react-native-async-storage/async-storage':'^1.23.1','@react-navigation/native':'^7.0.14','@react-navigation/native-stack':'^7.2.0','@react-navigation/bottom-tabs':'^7.0.14','react-native-screens':'^4.1.0','react-native-safe-area-context':'^4.10.5'};require('fs').writeFileSync('package.json',JSON.stringify(p,null,2));"

      - name: Create src skeleton and files
        run: |
          mkdir -p src/app src/shared/api src/features/auth/model src/pages/{Home,Catalog,Order,Profile}
          cat > src/shared/api/baseApi.js <<'EOF'
          import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';
          const BASE_URL='https://example.com/api';
          export const baseApi=createApi({reducerPath:'api',baseQuery:fetchBaseQuery({baseUrl:BASE_URL,prepareHeaders:(h,{getState})=>{const t=getState()?.auth?.token;if(t)h.set('authorization',`Bearer ${t}`);h.set('accept','application/json');return h;}}),tagTypes:['User','Catalog','Order'],endpoints:(b)=>({ping:b.query({query:()=>({url:'/ping'})})})});
          export const { usePingQuery }=baseApi;
          EOF
          cat > src/features/auth/model/authSlice.js <<'EOF'
          import { createSlice } from '@reduxjs/toolkit';
          const initialState={token:null,user:null,status:'idle'};
          const slice=createSlice({name:'auth',initialState,reducers:{loginSuccess(s,a){const{token,user}=a.payload||{};s.token=token||null;s.user=user||null;},logout(s){s.token=null;s.user=null;}}});
          export const { loginSuccess, logout }=slice.actions; export default slice.reducer;
          EOF
          cat > src/app/store.js <<'EOF'
          import { combineReducers, configureStore } from '@reduxjs/toolkit';
          import { setupListeners } from '@reduxjs/toolkit/query';
          import { persistReducer, persistStore } from 'redux-persist';
          import AsyncStorage from '@react-native-async-storage/async-storage';
          import { FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER } from 'redux-persist';
          import authReducer from '../features/auth/model/authSlice';
          import { baseApi } from '../shared/api/baseApi';
          const rootReducer=combineReducers({auth:authReducer,[baseApi.reducerPath]:baseApi.reducer});
          const persisted=persistReducer({key:'root',storage:AsyncStorage,version:1,whitelist:['auth']},rootReducer);
          export const store=configureStore({reducer:persisted,middleware:(g)=>g({serializableCheck:{ignoredActions:[FLUSH,REHYDRATE,PAUSE,PERSIST,PURGE,REGISTER]}}).concat(baseApi.middleware)});
          export const persistor=persistStore(store); setupListeners(store.dispatch);
          EOF
          for s in Home Catalog Order Profile; do
            cat > src/pages/$s/${s}Screen.js <<EOF
          import React from 'react'; import { View, Text, StyleSheet } from 'react-native';
          export default function ${s}Screen(){ return(<View style={s1.c}><Text style={s1.t}>${s}</Text></View>); }
          const s1=StyleSheet.create({c:{flex:1,alignItems:'center',justifyContent:'center'},t:{fontSize:22}});
          EOF
          done
          cat > App.js <<'EOF'
          import React from 'react';
          import { Provider } from 'react-redux';
          import { PersistGate } from 'redux-persist/integration/react';
          import { NavigationContainer } from '@react-navigation/native';
          import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
          import { store, persistor } from './src/app/store';
          import HomeScreen from './src/pages/Home/HomeScreen';
          import CatalogScreen from './src/pages/Catalog/CatalogScreen';
          import OrderScreen from './src/pages/Order/OrderScreen';
          import ProfileScreen from './src/pages/Profile/ProfileScreen';
          const Tab=createBottomTabNavigator();
          export default function App(){return(<Provider store={store}><PersistGate persistor={persistor}><NavigationContainer><Tab.Navigator screenOptions={{headerShown:false}}><Tab.Screen name="Home" component={HomeScreen}/><Tab.Screen name="Catalog" component={CatalogScreen}/><Tab.Screen name="Order" component={OrderScreen}/><Tab.Screen name="Profile" component={ProfileScreen}/></Tab.Navigator></NavigationContainer></PersistGate></Provider>);}
          EOF

      - name: Commit
        run: |
          git add -A
          if ! git diff --cached --quiet; then git commit -m "feat(app): scaffold RTK + RTKQ, tabs, base screens"; fi

      - name: Create PR
        uses: peter-evans/create-pull-request@v6
        with:
          branch: feat/rtk-setup
          title: "Scaffold: RTK + RTK Query, navigation, base screens"
          body: "Автогенерация структуры src/, store, вкладки и 4 экрана."
          commit-message: "feat(app): scaffold RTK + RTKQ, navigation, base screens"
          draft: false
